# This is a basic workflow to help you get started with Actions

name: Authoring

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  

      # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    branches:
      - dev
    inputs:
      approveDeployment:
        description: 'Type "approve" to confirm deployment to authoring server'
        required: true
        default: 'pending'
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'feature-branch'
      ontoserver:
        description: 'Ontoserver'
        required: true
        default: 'ontoserver-test'


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TARGET_SERVICE: targetservice${{ github.run_number }}
      CLINICAL_DEPLOY_BRANCHES: "dev stage test main"

   

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetches all history for all tags and branches
          ref: ${{ github.event.inputs.branch }}


      - name: capture branch name
        run: |
          echo "BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ GITHUB.BASE_REF}}" >> $GITHUB_ENV
          echo ${{github.event.inputs.branch}}

      - name: Make script executable
        run: chmod +x ./deploy/clinical/bin/build

      - name: run shell script
        run: ./deploy/clinical/bin/build ravi tripathi TARGET_SERVICE=targetservice

      - name: Conditional Step
        run: |
          if [[ ${{github.event.inputs.branch}} == 'main' ]]; then
            echo "main branch
          fi

      - name: Conditional Step
        if: contains(env.CLINICAL_DEPLOY_BRANCHES, github.ref_name)
        run: echo "Running on one of the specified branches"
      - name: print environment
        run: echo $CHANGE_TARGET


      - name: print environment
        run: echo $GITHUB_REF
      - name: Write Secret to File
        run: |
          echo "${{ secrets.TESTSECRET }}" | base64 -d > ./deploy/clinical/bin/build2

      - name: Make script executable
        run: chmod +x ./deploy/clinical/bin/build2

      - name: Run Script with Parameters
        env:
          TARGET_SERVICE: targetservice2  # Set your TARGET_SERVICE value here
        run: |
          cat ./deploy/clinical/bin/build2
          ./deploy/clinical/bin/build2 ravi prakash 
          


      - name: Set Target Branch as Env Var
        run: echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV

      - name: print environment-test condition
        if: env.TARGET_BRANCH != '' && contains(env.CLINICAL_DEPLOY_BRANCHES, env.TARGET_BRANCH)
        run: echo "PR is raised"


      - name: Determine Next Semantic Version
        id: semver
        run: |
          git fetch --tags

          # Get the latest tag based on semantic versioning
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n1)
          echo "Latest tag: $LATEST_TAG"

          if [ -z "$LATEST_TAG" ]; then
              FIRST_TAG="v1.0.0"
              echo "This is the first tag: $FIRST_TAG"
              echo "::set-output name=next_tag::$FIRST_TAG"
          else
              # Parse major, minor and patch version
              MAJOR=$(echo $LATEST_TAG | cut -d '.' -f1 | tr -dc '0-9')
              MINOR=$(echo $LATEST_TAG | cut -d '.' -f2)
              PATCH=$(echo $LATEST_TAG | cut -d '.' -f3 | tr -dc '0-9')

              # Increment the patch version
              NEXT_PATCH=$((PATCH + 1))
              NEXT_TAG="v${MAJOR}.${MINOR}.${NEXT_PATCH}"
              echo "Next tag: $NEXT_TAG"
              echo "::set-output name=next_tag::$NEXT_TAG"
          fi
      - name: create git tag
        if: env.BRANCH != 'main'
        env:
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }} # Your GitHub username as a secret
          GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }} # Your GitHub password or PAT as a secret
          RUN_NUMBER: ${{ github.run_number }}
        run: |
          branchnamegittag="${BRANCH}-v${{ github.run_number }}"
          git config user.email "jenkins@ravi.com"
          git config user.name "jenkins"
          git tag -a "${branchnamegittag}" -m "ContinuousDeployment build ${branchnamegittag}."
          git push --tags https://github.com/RaviTORG/myrepo.git

      - name: create git tag
        if: env.BRANCH == 'main'
        env:

          GIT_USERNAME: ${{ secrets.GIT_USERNAME }} # Your GitHub username as a secret
          GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }} # Your GitHub password or PAT as a secret
          RUN_NUMBER: ${{ github.run_number }}
        run: |
          branchnamegittag="${BRANCH}-v${{ github.run_number }}"
          git config user.email "jenkins@ravi.com"
          git config user.name "jenkins"
          git tag -a "${{ steps.semver.outputs.next_tag }}" -m "New version ${{ steps.semver.outputs.next_tag }}"
          git push --tags https://github.com/RaviTORG/myrepo.git



